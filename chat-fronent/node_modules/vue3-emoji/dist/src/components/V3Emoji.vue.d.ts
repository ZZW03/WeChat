import type { PropType as __PropType } from 'vue';
import { Emoji } from '../types/type';
declare const _sfc_main: import("vue").DefineComponent<{
    size: {
        type: __PropType<"mid" | "small" | "big" | undefined>;
        required: false;
        default: string;
    };
    disableGroup: {
        type: __PropType<string[] | undefined>;
        required: false;
        default: () => never[];
    };
    unicodeVersion: {
        type: __PropType<number | undefined>;
        required: false;
        default: number;
    };
    optionsName: {
        type: __PropType<Emoji.JsonData | undefined>;
        required: false;
        default: () => {};
    };
    theme: {
        type: __PropType<"dark" | "default" | undefined>;
        required: false;
        default: string;
    };
    skin: {
        type: __PropType<"dark" | "middark" | "mid" | "midlight" | "light" | "none" | undefined>;
        required: false;
        default: string;
    };
    recent: {
        type: __PropType<boolean | undefined>;
        required: false;
        default: boolean;
    };
    defaultSelect: {
        type: __PropType<string | undefined>;
        required: false;
        default: string;
    };
    fulldata: {
        type: __PropType<boolean | undefined>;
        required: false;
        default: boolean;
    };
    textArea: {
        type: __PropType<boolean | undefined>;
        required: false;
        default: boolean;
    };
    inputType: {
        type: __PropType<"textarea" | "input" | undefined>;
        required: false;
        default: string;
    };
    textAreaOption: {
        type: __PropType<Emoji.TextAreaOptions | undefined>;
        required: false;
        default: () => {
            placeholder: string;
            rows: number;
            cols: number;
            resize: string;
        };
    };
    keep: {
        type: __PropType<boolean | undefined>;
        required: false;
        default: boolean;
    };
    modelValue: {
        type: __PropType<string | undefined>;
        required: false;
        default: string;
    };
    customSize: {
        type: __PropType<Emoji.CustomSize | undefined>;
        required: false;
    };
    customTheme: {
        type: __PropType<Emoji.CustomTheme | undefined>;
        required: false;
    };
    customIcon: {
        type: __PropType<Emoji.CustomIcon | undefined>;
        required: false;
    };
    customTab: {
        type: __PropType<Emoji.ObjectItem | undefined>;
        required: false;
    };
    fixPos: {
        type: __PropType<Emoji.FixType | undefined>;
        required: false;
    };
    manualClose: {
        type: __PropType<boolean | undefined>;
        required: false;
        default: boolean;
    };
}, {
    closePop: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("clickEmoji" | "close" | "update:modelValue" | "changeText")[], "clickEmoji" | "close" | "update:modelValue" | "changeText", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    size: {
        type: __PropType<"mid" | "small" | "big" | undefined>;
        required: false;
        default: string;
    };
    disableGroup: {
        type: __PropType<string[] | undefined>;
        required: false;
        default: () => never[];
    };
    unicodeVersion: {
        type: __PropType<number | undefined>;
        required: false;
        default: number;
    };
    optionsName: {
        type: __PropType<Emoji.JsonData | undefined>;
        required: false;
        default: () => {};
    };
    theme: {
        type: __PropType<"dark" | "default" | undefined>;
        required: false;
        default: string;
    };
    skin: {
        type: __PropType<"dark" | "middark" | "mid" | "midlight" | "light" | "none" | undefined>;
        required: false;
        default: string;
    };
    recent: {
        type: __PropType<boolean | undefined>;
        required: false;
        default: boolean;
    };
    defaultSelect: {
        type: __PropType<string | undefined>;
        required: false;
        default: string;
    };
    fulldata: {
        type: __PropType<boolean | undefined>;
        required: false;
        default: boolean;
    };
    textArea: {
        type: __PropType<boolean | undefined>;
        required: false;
        default: boolean;
    };
    inputType: {
        type: __PropType<"textarea" | "input" | undefined>;
        required: false;
        default: string;
    };
    textAreaOption: {
        type: __PropType<Emoji.TextAreaOptions | undefined>;
        required: false;
        default: () => {
            placeholder: string;
            rows: number;
            cols: number;
            resize: string;
        };
    };
    keep: {
        type: __PropType<boolean | undefined>;
        required: false;
        default: boolean;
    };
    modelValue: {
        type: __PropType<string | undefined>;
        required: false;
        default: string;
    };
    customSize: {
        type: __PropType<Emoji.CustomSize | undefined>;
        required: false;
    };
    customTheme: {
        type: __PropType<Emoji.CustomTheme | undefined>;
        required: false;
    };
    customIcon: {
        type: __PropType<Emoji.CustomIcon | undefined>;
        required: false;
    };
    customTab: {
        type: __PropType<Emoji.ObjectItem | undefined>;
        required: false;
    };
    fixPos: {
        type: __PropType<Emoji.FixType | undefined>;
        required: false;
    };
    manualClose: {
        type: __PropType<boolean | undefined>;
        required: false;
        default: boolean;
    };
}>> & {
    onClickEmoji?: ((...args: any[]) => any) | undefined;
    onClose?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onChangeText?: ((...args: any[]) => any) | undefined;
}, {
    size: "mid" | "small" | "big" | undefined;
    theme: "dark" | "default" | undefined;
    skin: "dark" | "middark" | "mid" | "midlight" | "light" | "none" | undefined;
    disableGroup: string[] | undefined;
    optionsName: Emoji.JsonData | undefined;
    unicodeVersion: number | undefined;
    defaultSelect: string | undefined;
    recent: boolean | undefined;
    fulldata: boolean | undefined;
    textArea: boolean | undefined;
    inputType: "textarea" | "input" | undefined;
    textAreaOption: Emoji.TextAreaOptions | undefined;
    keep: boolean | undefined;
    modelValue: string | undefined;
    manualClose: boolean | undefined;
}>;
export default _sfc_main;
//# sourceMappingURL=V3Emoji.vue.d.ts.map