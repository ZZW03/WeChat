import { getColor } from "@/module/common-methords/GetColor";
import { selectColor } from "@/module/common-methords/SelectColor";
import { SetupContext } from "@vue/runtime-core";
import { setBrushSize } from "@/module/common-methords/SetBrushSize";
declare const _default: {
    name: string;
    props: {};
    setup(props: Record<string, any>, context: SetupContext<any>): {
        screenShortWidth: import("@vue/reactivity").Ref<number>;
        screenShortHeight: import("@vue/reactivity").Ref<number>;
        screenShortController: import("@vue/reactivity").Ref<HTMLCanvasElement | null>;
        textInputController: import("@vue/reactivity").Ref<HTMLDivElement | null>;
        toolController: import("@vue/reactivity").Ref<HTMLDivElement | null>;
        optionIcoController: import("@vue/reactivity").Ref<HTMLDivElement | null>;
        optionController: import("@vue/reactivity").Ref<HTMLDivElement | null>;
        toolStatus: import("@vue/reactivity").Ref<boolean>;
        textStatus: import("@vue/reactivity").Ref<boolean>;
        undoStatus: import("@vue/reactivity").Ref<boolean>;
        optionStatus: import("@vue/reactivity").Ref<boolean>;
        colorPanelStatus: import("@vue/reactivity").Ref<boolean>;
        currentName: import("@vue/reactivity").Ref<string>;
        toolLeft: import("@vue/reactivity").Ref<number>;
        toolTop: import("@vue/reactivity").Ref<number>;
        optionIcoPosition: import("@vue/reactivity").Ref<number>;
        selectedColor: import("@vue/reactivity").Ref<string>;
        toolbar: {
            id: number;
            title: string;
        }[];
        toolClickEvent: (toolName: string, index: number, mouseEvent: MouseEvent) => void;
        getColor: typeof getColor;
        selectColor: typeof selectColor;
        setBrushSize: typeof setBrushSize;
        hiddenToolIco: import("@vue/reactivity").Ref<{
            save?: boolean | undefined;
            undo?: boolean | undefined;
            confirm?: boolean | undefined;
        }>;
    };
    emits: {
        "destroy-component": (status: boolean) => boolean;
        "get-image-data": (base64: string) => boolean;
        "webrtc-error": (errMsg: string) => boolean;
    };
};
export default _default;
