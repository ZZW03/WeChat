import { ComponentInternalInstance } from "vue";
import { positionInfoType, toolIcoType } from "@/module/type/ComponentType";
export default class InitData {
    constructor();
    setInitStatus(status: boolean): void;
    getInitStatus(): boolean;
    getScreenShortWidth(): import("vue").Ref<number>;
    getScreenShortHeight(): import("vue").Ref<number>;
    setScreenShortInfo(width: number, height: number): void;
    getScreenShortController(): import("vue").Ref<HTMLCanvasElement | null>;
    getToolController(): import("vue").Ref<HTMLDivElement | null>;
    getTextInputController(): import("vue").Ref<HTMLDivElement | null>;
    getToolStatus(): import("vue").Ref<boolean>;
    getTextStatus(): import("vue").Ref<boolean>;
    getScreenShortImageController(): HTMLCanvasElement | null;
    setScreenShortImageController(imageController: HTMLCanvasElement): void;
    setToolStatus(status: boolean): void;
    setTextStatus(status: boolean): void;
    getToolLeft(): import("vue").Ref<number>;
    getToolTop(): import("vue").Ref<number>;
    setToolInfo(left: number, top: number): void;
    getToolClickStatus(): import("vue").Ref<boolean>;
    setToolClickStatus(status: boolean): void;
    getCutOutBoxPosition(): positionInfoType;
    getDragging(): boolean;
    setDragging(status: boolean): void;
    setCutOutBoxPosition(mouseX: number, mouseY: number, width: number, height: number): void;
    getUndoStatus(): import("vue").Ref<boolean>;
    setUndoStatus(status: boolean): void;
    getOptionStatus(): import("vue").Ref<boolean>;
    setOptionStatus(status: boolean): void;
    getOptionIcoController(): import("vue").Ref<HTMLDivElement | null>;
    getOptionController(): import("vue").Ref<HTMLDivElement | null>;
    getOptionIcoPosition(): import("vue").Ref<number>;
    setOptionIcoPosition(position: number): void;
    getColorPanelStatus(): import("vue").Ref<boolean>;
    setColorPanelStatus(status: boolean): void;
    getSelectedColor(): import("vue").Ref<string>;
    setSelectedColor(color: string): void;
    getToolName(): import("vue").Ref<string>;
    setToolName(itemName: string): void;
    getPenSize(): import("vue").Ref<number>;
    setPenSize(size: number): void;
    /**
     * 设置父组件传递的数据
     * @param emitParam
     */
    setPropsData(emitParam: (event: string, ...args: any[]) => void): void;
    /**
     * 设置实例属性
     * @param instanceParam
     */
    setProperty(instanceParam: ComponentInternalInstance | null): void;
    getCurrentInstance(): ComponentInternalInstance | null | undefined;
    getEmit(): ((event: string, ...args: any[]) => void) | undefined;
    getHiddenToolIco(): import("vue").Ref<{
        save?: boolean | undefined;
        undo?: boolean | undefined;
        confirm?: boolean | undefined;
    }>;
    setHiddenToolIco(obj: toolIcoType): void;
}
