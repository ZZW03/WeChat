import { SetupContext } from "@vue/runtime-core";
export default class EventMonitoring {
    private readonly data;
    private emit;
    private screenShortController;
    private toolController;
    private screenShortImageController;
    private screenShortCanvas;
    private textInputController;
    private optionController;
    private optionIcoController;
    private readonly videoController;
    private wrcWindowMode;
    private drawGraphPosition;
    private tempGraphPosition;
    private cutOutBoxBorderArr;
    private borderSize;
    private borderOption;
    private drawArrow;
    private movePosition;
    private draggingTrim;
    private dragging;
    private mouseInsideCropBox;
    private clickFlag;
    private dragFlag;
    private clickCutFullScreen;
    private getFullScreenStatus;
    private drawGraphPrevX;
    private drawGraphPrevY;
    private toolName;
    private fontSize;
    private undoClickNum;
    private maxUndoNum;
    private degreeOfBlur;
    private dpr;
    private fullScreenDiffHeight;
    private history;
    private textInputPosition;
    private hiddenScrollBar;
    private textInfo;
    constructor(props: Record<string, any>, context: SetupContext<any>);
    private wrcMode;
    private h2cMode;
    private startCapture;
    private stopCapture;
    private drawContent;
    private mouseDownEvent;
    private mouseMoveEvent;
    /**
     * 从窗口数据流中截取页面body内容
     * @param videoWidth 窗口宽度
     * @param videoHeight 窗口高度
     * @param containerWidth body内容宽度
     * @param containerHeight body内容高度
     * @private
     */
    private getWindowContentData;
    private mouseUpEvent;
    /**
     * 操作裁剪框
     * @param currentX 裁剪框当前x轴坐标
     * @param currentY 裁剪框当前y轴坐标
     * @param startX 鼠标x轴坐标
     * @param startY 鼠标y轴坐标
     * @param width 裁剪框宽度
     * @param height 裁剪框高度
     * @param context 需要进行绘制的canvas画布
     * @private
     */
    private operatingCutOutBox;
    /**
     * 裁剪框工具栏点击事件
     * @param toolName
     * @param index
     * @param mouseEvent
     */
    toolClickEvent: (toolName: string, index: number, mouseEvent: MouseEvent) => void;
    /**
     * 保存当前画布状态
     * @private
     */
    private addHistory;
    /**
     * 显示最新的画布状态
     * @private
     */
    private showLastHistory;
    /**
     * 取出一条历史记录
     */
    private takeOutHistory;
    /**
     * 重置组件
     */
    private resetComponent;
    private destroyDOM;
    private updateScrollbarState;
    /**
     * 将指定区域的canvas转为图片
     * @private
     */
    private getCanvasImgData;
}
